{"version":3,"sources":["Metrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["require","Object","keys","dataC","divDOWN","document","createElement","id","body","appendChild","countriesName","countriesLanguage","countriesWishe","compare","a","b","value","keysC","App","searchWishesForALanguage","languageW","res","i","dataW","length","Language","toLowerCase","Wishe","push","name","sort","countries","_useState","useState","_useState2","slicedToArray","setSelectedOption","react_default","className","onChange","event","target","allL","languages","j","language","dataL","wishe","selected","disabled","map","option","onClick","message","mail","href","click","sendMail","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.2f653696.chunk.js","sourcesContent":["import * as dataL from '../src/assets/languages.json';\nimport * as dataC from '../src/assets/countries.json';\nimport * as dataW from '../src/assets/Wishes.json';\n\nconst fs = require(\"fs\");\n\nvar keysC : string[]= Object.keys(dataC.countries)\nvar languagesC : string[] = []\nvar languagesW : string[] = []\nvar missingLanguages : string[] = []\n\nexport function metrics() : void{\n  for (let i = 0 ; i < keysC.length ; i++){\n      //@ts-ignore\n      var allL = dataC.countries[keysC[i]].languages;\n      for (let j = 0 ; j < allL.length ; j++){\n        //@ts-ignore\n        languagesC.push((dataL.languages[allL[j]].name ).toLowerCase())\n      }\n    }\n  for (let i = 0 ; i <dataW.list.length ; i++){\n    languagesW.push((dataW.list[i].Language).toLowerCase());\n  }\n\n  \n  for (let i = 0 ; i < languagesC.length ; i++){\n    if (!languagesW.includes(languagesC[i])){\n        missingLanguages.push(languagesC[i]);\n    }\n  }\n  console.log(missingLanguages.sort());  \n}\n","import React , { useState } from 'react';\nimport './App.css';\nimport './Metrics'\n\nimport * as dataL from '../src/assets/languages.json';\nimport * as dataC from '../src/assets/countries.json';\nimport * as dataW from '../src/assets/Wishes.json';\nimport { metrics } from './Metrics';\nconst fs = require('fs');\nconst divDOWN = document.createElement(\"div\");\ndivDOWN.id=\"message\";\ndocument.body.appendChild(divDOWN)\n\nlet countriesName : {value:string}[] = []\n\nlet countriesLanguage: { language:string}[] = []\nlet countriesWishe : { language: string,wishe: string}[] = []\n\nfunction compare( a : {value:string}, b : {value:string} ) {\n  if ( a.value < b.value ){\n    return -1;\n  }\n  else if ( a.value > b.value ){\n    return 1;\n  }\n  else {return 0};\n}\n\nvar keysC : string[]= Object.keys(dataC.countries)\n\nfunction countries():  {value:string}[] {\n  for (let i = 0 ; i < keysC.length ; i++){\n    //@ts-ignore\n    countriesName.push({\"value\":dataC.countries[keysC[i]].name});\n  } \n \n  return countriesName.sort(compare);\n}\n\n//metrics()\n\nconst App: React.FunctionComponent = () => {\n  countriesName = [];\n  countries()\n  function searchWishesForALanguage (languageW : string) :string {\n    let res: string = \"\"\n    for (let i = 0 ; i < dataW.list.length ; i++){\n      if ((dataW.list[i].Language).toLowerCase() == languageW.toLowerCase()){\n        res = dataW.list[i].Wishe\n      }\n    }\n    return res\n  }\n \n\n  const [selectedOption, setSelectedOption] = useState<String>();\n  const selectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    countriesLanguage=[]\n    countriesWishe = []\n    for (let i = 0 ; i < keysC.length ; i++){\n      //@ts-ignore\n      if (value ==  dataC.countries[keysC[i]].name){\n        //@ts-ignore\n        var allL = dataC.countries[keysC[i]].languages;\n        //@ts-ignore\n        for (let j = 0 ; j < allL.length ; j++){\n          //@ts-ignore\n          countriesLanguage.push( {\"language\" : dataL.languages[allL[j]].name } )\n          countriesWishe.push({\"language\": allL[j],wishe:searchWishesForALanguage(allL[j])});\n       }\n    }\n  }\n    setSelectedOption(value);\n  };\n  return (\n    <div className='App' >\n      <select className='App-select' onChange={selectChange} >\n        <option selected disabled>\n          Choose one\n        </option>\n        {countriesName.map((option) => (\n            <option value={option.value}>{option.value}</option>\n  \n        ))}          \n      </select>    \n      <div>\n        <table>\n          <tbody>\n        {countriesLanguage.map((option) => (\n            <tr>\n              <td>{option.language}</td>\n              <td onClick={() => sendMail(searchWishesForALanguage(option.language))}>{searchWishesForALanguage(option.language) }</td>\n            </tr>\n        ))}\n        </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nfunction sendMail(message : string){\n  let mail = document.createElement(\"a\");\n  mail.href = \"mailto:?subject=2022&body=\"+message+\" 2022 !\"+\"ðŸ¥³\";\n  mail.click();\n}\n\nexport const messageChoisi:string = \"message-A-Afficher\"\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App,{messageChoisi} from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>\n  ,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}