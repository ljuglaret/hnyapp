{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["divDOWN","require","document","createElement","id","body","appendChild","countriesName","countriesLanguage","countriesWishe","App","searchWishesForALanguage","languageW","res","i","dataW","length","Language","toLowerCase","Wishe","keysC","Object","keys","dataC","_useState","useState","_useState2","slicedToArray","selectedOption","setSelectedOption","push","value","name","countries","react_default","a","className","defaultValue","onChange","event","target","allL","languages","j","language","dataL","wishe","selected","disabled","map","option","onClick","message","mail","href","click","sendMail","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"wxsDAQMA,GADKC,EAAQ,IACHC,SAASC,cAAc,QACvCH,EAAQI,GAAG,UACXF,SAASG,KAAKC,YAAYN,GAE1B,IAAIO,EAAmC,GAEnCC,EAA0C,GAC1CC,EAAuD,GA+EpD,IACQC,EA9EsB,WAEnC,SAASC,EAA0BC,GAEjC,IADA,IAAIC,EAAc,GACTC,EAAI,EAAIA,EAAIC,IAAWC,OAASF,IAClCC,IAAWD,GAAGG,SAAUC,eAAiBN,EAAUM,gBACtDL,EAAME,IAAWD,GAAGK,OAGxB,OAAON,EAET,IAAIO,EAAkBC,OAAOC,KAAKC,KAXO,IAAAC,EAmBGC,qBAnBHC,EAAAL,OAAAM,EAAA,EAAAN,CAAAG,EAAA,GAmBlCI,EAnBkCF,EAAA,GAmBlBG,EAnBkBH,EAAA,GAyCzC,OA7BA,WACE,IAAK,IAAIZ,EAAI,EAAIA,EAAIM,EAAMJ,OAASF,IAElCP,EAAcuB,KAAK,CAACC,MAAQR,IAAgBH,EAAMN,IAAIkB,OAwB1DC,GAGEC,EAAAC,EAAAhC,cAAA,OAAKiC,UAAU,OACbF,EAAAC,EAAAhC,cAAA,UAAQkC,aAAc,UAAWD,UAAU,aAAaE,SAvBvC,SAACC,GACpB,IAAMR,EAAQQ,EAAMC,OAAOT,MAC3BvB,EAAkB,GAClBC,EAAiB,GACjB,IAAK,IAAIK,EAAI,EAAIA,EAAIM,EAAMJ,OAASF,IAElC,GAAIiB,GAAUR,IAAgBH,EAAMN,IAAIkB,KAItC,IAFA,IAAIS,EAAOlB,IAAgBH,EAAMN,IAAI4B,UAE5BC,EAAI,EAAIA,EAAIF,EAAKzB,OAAS2B,IAEjCnC,EAAkBsB,KAAM,CAACc,SAAaC,IAAgBJ,EAAKE,IAAIX,OAC/DvB,EAAeqB,KAAK,CAACc,SAAYH,EAAKE,GAAGG,MAAMnC,EAAyB8B,EAAKE,MAInFd,EAAkBE,KAOdG,EAAAC,EAAAhC,cAAA,UAAQ4C,UAAQ,EAACC,UAAQ,GAAzB,cAGCzC,EAAc0C,IAAI,SAACC,GAAD,OACfhB,EAAAC,EAAAhC,cAAA,UAAQ4B,MAAOmB,EAAOnB,OAAQmB,EAAOnB,UAI3CG,EAAAC,EAAAhC,cAAA,SAAKyB,EAAL,KACAM,EAAAC,EAAAhC,cAAA,WACE+B,EAAAC,EAAAhC,cAAA,aACE+B,EAAAC,EAAAhC,cAAA,cACA+B,EAAAC,EAAAhC,cAAA,aACDK,EAAkByC,IAAI,SAACC,GAAD,OACnBhB,EAAAC,EAAAhC,cAAA,UACE+B,EAAAC,EAAAhC,cAAA,UAAK+C,EAAON,UACZV,EAAAC,EAAAhC,cAAA,MAAIgD,QAAS,kBAW3B,SAAkBC,GAChB,IAAIC,EAAOnD,SAASC,cAAc,KAClCkD,EAAKC,KAAO,6BAA6BF,EAAQ,sBACjDC,EAAKE,QAd0BC,CAAS7C,EAAyBuC,EAAON,aAAajC,EAAyBuC,EAAON,mBC/DxGa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCFdY,IAASC,OACPrC,EAAAC,EAAAhC,cAAC+B,EAAAC,EAAMqC,WAAP,KACEtC,EAAAC,EAAAhC,cAACsE,EAAD,OAKFvE,SAASwE,eAAe,SAM1BjB","file":"static/js/main.d6a0da55.chunk.js","sourcesContent":["import React , { useState } from 'react';\nimport './App.css';\n\nimport * as dataL from '../src/assets/languages.json';\nimport * as dataC from '../src/assets/countries.json';\nimport * as dataW from '../src/assets/Wishes.json';\nimport { Zlib } from 'zlib';\nconst fs = require('fs');\nconst divDOWN = document.createElement(\"div\");\ndivDOWN.id=\"message\";\ndocument.body.appendChild(divDOWN)\n\nlet countriesName : {value:string}[] = []\n\nlet countriesLanguage: { language:string}[] = []\nlet countriesWishe : { language: string,wishe: string}[] = []\n\nconst App: React.FunctionComponent = () => {\n \n  function searchWishesForALanguage (languageW : string) :string {\n    let res: string = \"\"\n    for (let i = 0 ; i < dataW.list.length ; i++){\n      if ((dataW.list[i].Language).toLowerCase() == languageW.toLowerCase()){\n        res = dataW.list[i].Wishe\n      }\n    }\n    return res\n  }\n  var keysC : string[]= Object.keys(dataC.countries)\n  function countries(): void {\n    for (let i = 0 ; i < keysC.length ; i++){\n      //@ts-ignore\n      countriesName.push({\"value\":dataC.countries[keysC[i]].name});\n    } \n}\n\n  const [selectedOption, setSelectedOption] = useState<String>();\n  const selectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    countriesLanguage=[]\n    countriesWishe = []\n    for (let i = 0 ; i < keysC.length ; i++){\n      //@ts-ignore\n      if (value ==  dataC.countries[keysC[i]].name){\n        //@ts-ignore\n        var allL = dataC.countries[keysC[i]].languages;\n        //@ts-ignore\n        for (let j = 0 ; j < allL.length ; j++){\n          //@ts-ignore\n          countriesLanguage.push( {\"language\" : dataL.languages[allL[j]].name } )\n          countriesWishe.push({\"language\": allL[j],wishe:searchWishesForALanguage(allL[j])});\n       }\n    }\n  }\n    setSelectedOption(value);\n  };\n  countries();\n\n  return (\n    <div className='App' >\n      <select defaultValue={'DEFAULT'} className='App-select' onChange={selectChange} >\n        <option selected disabled>\n          Choose one\n        </option>\n        {countriesName.map((option) => (\n            <option value={option.value}>{option.value}</option>\n  \n        ))}          \n      </select>    \n      <p >{selectedOption} </p>\n      <div>\n        <table>\n          <thead></thead>\n          <tbody>\n        {countriesLanguage.map((option) => (\n            <tr>\n              <td>{option.language}</td>\n              <td onClick={() => sendMail(searchWishesForALanguage(option.language))}>{searchWishesForALanguage(option.language) }</td>\n            </tr>\n        ))}\n        </tbody>\n        </table>\n      \n      </div>\n    </div>\n  );\n};\n\nfunction sendMail(message : string){\n  let mail = document.createElement(\"a\");\n  mail.href = \"mailto:?subject=2022&body=\"+message+\" 2022 !\"+\"ðŸ¥³\";\n  mail.click();\n}\n\nexport const messageChoisi:string = \"message-A-Afficher\"\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App,{messageChoisi} from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>\n  ,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}